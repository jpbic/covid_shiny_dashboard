arrange(desc(correlation))
View(cors)
rm(cors)
# Q13 ####
df %>%
filter(Commodity == 'Crushed Stone, Sand and Gravel') %>%
ggplot(aes(x = monthly_carloads, y = Index, color = Year)) +
geom_point()
# Q13 ####
df %>%
filter(Commodity == 'Crushed Stone, Sand and Gravel') %>%
ggplot(aes(x = monthly_carloads, y = Index)) +
geom_point(aes(color = Year))
# Q13 ####
df %>%
filter(Commodity == 'Crushed Stone, Sand and Gravel') %>%
mutate(Year = factor(Year)) %>%
ggplot(aes(x = monthly_carloads, y = Index)) +
geom_point(aes(color = Year))
# Q1 ####
carloads = read.csv('./data/carloads.csv')
ism = read.csv('./data/ism.csv')
# Q2 ####
carloads = carloads %>%
filter(
Measure == 'Weekly Carloads By 22 Commodity Categories',
Sub.Variable == 'Total'
)
# Q3 ####
carloads = carloads %>%
pivot_longer(
!Company:Sub.Variable,
names_to = 'Week',
values_to = 'Carloads'
)
# Q4 ####
carloads = carloads %>%
select(Company, Variable, Week, Carloads) %>%
rename(Commodity = Variable)
# Q5 ####
carloads = carloads %>%
mutate(Week = gsub('X', '', Week))
# Q6 ####
carloads = carloads %>%
mutate(Carloads = as.numeric(gsub(',', '', Carloads)))
# Q7 ####
carloads = carloads %>%
mutate(Week = as.Date(Week, '%m.%d.%Y'))
ism = ism %>%
mutate(Date = as.Date(Date, '%m/%d/%Y'))
# Q8 ####
carloads = carloads %>%
mutate(Year = year(Week), Month = month(Week))
ism = ism %>%
mutate(Year = year(Date), Month = month(Date))
# Q9 ####
carloads = carloads %>%
group_by(Company, Commodity, Month, Year) %>%
summarise(monthly_carloads = sum(Carloads))
# Q10 ####
df = inner_join(
carloads,
ism
)
# Q11 ####
df %>%
ggplot(aes(x = Company, y = monthly_carloads, fill = Commodity)) +
geom_boxplot() + facet_wrap(vars(Year), nrow = 2, ncol = 2) +
theme(legend.key.width = unit(0.15, 'cm'), legend.text = element_text(size=6))
# Q12 ####
df %>%
group_by(Commodity) %>%
summarise(correlation = cor(monthly_carloads, Index)) %>%
arrange(desc(correlation))
# Q12 ####
cors = df %>%
group_by(Commodity) %>%
summarise(correlation = cor(monthly_carloads, Index)) %>%
arrange(desc(correlation))
View(cors)
rm(cors)
# Q13 ####
df %>%
filter(Commodity == 'Crushed Stone, Sand and Gravel') %>%
mutate(Year = factor(Year)) %>%
ggplot(aes(x = monthly_carloads, y = Index)) +
geom_point(aes(color = Year))
# Q10 ####
df = inner_join(
carloads,
ism
)
# Q13 ####
df %>%
filter(Commodity == 'Crushed Stone, Sand and Gravel') %>%
mutate(Year = factor(Year)) %>%
ggplot(aes(x = monthly_carloads, y = Index)) +
geom_point(aes(color = Year))
# Q13 ####
df %>%
filter(Commodity == 'Crushed Stone, Sand and Gravel') %>%
ggplot(aes(x = Index, y = monthly_carloads)) +
geom_point(aes(color = Year))
# Q13 ####
df %>%
filter(Commodity == 'Crushed Stone, Sand and Gravel') %>%
mutate(Year = factor(Year %>%))
# Q13 ####
df %>%
filter(Commodity == 'Crushed Stone, Sand and Gravel') %>%
mutate(Year = factor(Year)) %>%
ggplot(aes(x = Index, y = monthly_carloads)) +
geom_point(aes(color = Year))
# Q13 ####
df %>%
filter(Commodity == 'Crushed Stone, Sand and Gravel') %>%
mutate(Year = factor(Year)) %>%
ggplot(aes(x = Index, y = monthly_carloads)) +
geom_point(aes(color = Year)) + geom_jitter()
# Q13 ####
df %>%
filter(Commodity == 'Crushed Stone, Sand and Gravel') %>%
mutate(Year = factor(Year)) %>%
ggplot(aes(x = Index, y = monthly_carloads)) +
geom_point(aes(color = Year))
# Q13 ####
df %>%
filter(Commodity == 'Crushed Stone, Sand and Gravel') %>%
mutate(Year = factor(Year)) %>%
ggplot(aes(x = Index, y = monthly_carloads)) +
geom_point(aes(color = Year)) + geom_smooth()
ggplot(aes(x = Index, y = monthly_carloads, color = Year)) +
# Q13 ####
df %>%
filter(Commodity == 'Crushed Stone, Sand and Gravel') %>%
mutate(Year = factor(Year)) %>%
ggplot(aes(x = Index, y = monthly_carloads, color = Year)) +
geom_point() + geom_smooth(method='lm')
carloads = read.csv("./carloads.csv", stringsAsFactors = F)
carloads = read.csv("./data/carloads.csv", stringsAsFactors = F)
# Q1 ####
carloads = read.csv('./data/carloads.csv')
ism = read.csv('./data/ism.csv')
carloads <- carloads %>%
filter(
Measure == 'Weekly Carloads By 22 Commodity Categories',
Sub.Variable == 'Total'
)
carloads <- carloads %>%
filter(
Measure == 'Weekly Carloads By 22 Commodity Categories',
Sub.Variable == 'Total'
)
---
#### Q3.
Note that the dataset `carloads` contains columns named from `X3.29.2017` to `X10.7.2020`, which are meant to be the values of the variable `Week`, because each of these column names is one day of a week. Reshape the data frame to convert these date columns into a `Week` column in the `Carloads` data frame.
```{r}
carloads <- carloads %>%
pivot_longer(
X3.29.2017:X10.7.2020, "Week", values_to = "Carloads"
)
carloads <- carloads %>% select(
Company, Commodity=Variable, Week, Carloads
)
carloads <- carloads %>%
mutate(
Week = gsub("X", "", Week),
Carloads = gsub(",", "", Carloads)
)
carloads <- carloads %>%
mutate(
Carloads = as.numeric(Carloads)
)
carloads <- carloads %>%
mutate(
Week = as.Date(Week, "%m.%d.%Y")
)
ism <- ism %>% mutate(Date=as.Date(Date, "%m/%d/%Y"))
carloads <- carloads %>%
mutate(
Year = year(Week),
Month = month(Week)
)
ism <- ism %>%
mutate(
Year = year(Date),
Month = month(Date)
)
carloads <- carloads %>%
group_by(Company, Commodity, Year, Month) %>%
summarise(Carloads = sum(Carloads))
df <- carloads %>%
inner_join(ism, by=c("Year","Month"))
df %>%
filter(Commodity=="Containers") %>%
ggplot() +
geom_boxplot(
aes(Company, Carloads),
) +
facet_grid(Year~.) +
scale_y_continuous(labels = scales::comma) +
theme(text = element_text(size=10)) # The last two lines are for aesthetic purposes and are not necessary
df %>%
group_by(Company, Commodity) %>%
summarise(correlation=cor(Carloads, Index)) %>%
arrange(desc(correlation)) %>%
head(10) %>%
knitr::kable() # This is a function that produces a table that is better displayed in an html file rendered from R Markdown.
df %>%
filter(Commodity=="Crushed Stone, Sand and Gravel")  %>%
mutate(Year=as.factor(Year)) %>%
group_by(Year, Month) %>%
summarise(Carloads = sum(Carloads), Index=first(Index)) %>%
ggplot() +
geom_point(aes(Carloads, Index, color=Year))
install.packages(c('ggmap', 'rgdal', 'rgeos', 'maptools', 'tmap'))
install.packages('leaflet')
?register_googl
?register_google
install.packages('ggmap')
library(ggmap)
?register_google
uninstall.packages(ggmap)
?uninstall
??uninstall
remove.packages(ggmap)
remove.packages(c('ggmap'))
install.packages('nominatim')
?version
??version
version
install.packages('nominatim')
install_github("hrbrmstr/nominatim")
install.packages('remote')
install_github("hrbrmstr/nominatim")
remote::install_github('hrbrmstr/nominatim')
remove.packages(remote)
remove.packages('remote')
install.packages('devtools')
devtools::install_github('hrbrmstr/nominatim')
devtools::install_github('hrbrmstr/nominatim')
nominatim::reverse_geocode_coords(33.93911, 67.709953)
remove.packages(nominatim)
remove.packages('nominatim')
install.packages('ggmap')
install.packages("ggmap")
ggplot2::map_data(map('usa'))
library(maps)
ggplot2::map_data(map('usa'))
ggplot2::map_data(map('county', 'usa'))
ggplot2::map_data(map('county', 'new jersey'))
install.packages('tmaptools')
library(tmaptools)
address = rev_geocode_OSM(33.93911, 67.709953, as.data.frame = T)
View(address)
address = rev_geocode_OSM(67.709953, 33.93911, as.data.frame = T)
tm_shape(nz)
tmaps::tm_shape(nz)
install.packages('tmaps')
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
rm(list=ls())
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
warnings()
help('dplyr')
head(pkgs.to.remove)
head(pkgs.to.remove)
class(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
library(dplyr)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
remove.packages('translations')
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
install.packages(c('dplyr', 'dbplyr', 'DBI'))
install.packages(c("dplyr", "dbplyr", "DBI"))
rm(list=ls())
install.packages('tidyverse')
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
View(ip)
rm(ip)
install.packages('ggplot2')
install.packages('tmap')
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
View(ip)
rm(ip)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
View(ip)
rm(ip)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
View(ip)
rm(ip)
sf
tmap::tm_shape(nz)
tmap::tm_shape(data('World'))
library(tmap)
version
data("World")
View(World)
tm_shape(World)+tm_polygons()
tm_shape(World)+tm_polygons("HPI")
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
View(ip)
getData(country='USA', level=1)
raster::getData(country='USA', level=1)
?raster::getData
tmap::tm_shape(World)+tmap::tm_polygons()
?tmap_animation
View(World)
library(dplyr)
filter(World, name != sovereignt)
str(World)
filter(World, as.character(sovereignt) != as.character(name))
class(World)
World %>%
group_by(name) %>%
World %>%
group_by(sovereignt) %>%
count() %>%
arrange(desc(n))
rm(list=ls())
library(c('ggplot2', 'dplyr', 'sf', 'tmap', 'tmaptools'))
required_packages = c(
'dplyr',
'tmap',
'tmaptools',
'sf',
'ggplot2'
)
lapply(required_packages, require, character.only = T)
rev_geocode_OSM(-100, 40)
rm(required_packages)
cd ..
setwd("C:/Users/jason/NYCDSA/Data Analysis with R/covid_shiny_dashboard")
cd '..'
cd '../'
confirmed = read.csv('./data/time_series_covid_19_confirmed.csv')
confirmed
head(confirmed)
confirmed = read.csv('./data/time_series_covid_19_confirmed.csv') %>%
pivot_longer(-Province.State:Long, names_to = 'date', values_to = 'confirmed')
required_packages = c(
'dplyr',
'tmap',
'tmaptools',
'sf',
'ggplot2',
'tidyr'
)
lapply(required_packages, require, character.only = T)
confirmed = read.csv('./data/time_series_covid_19_confirmed.csv') %>%
pivot_longer(-Province.State:Long, names_to = 'date', values_to = 'confirmed')
rm(confirmed)
confirmed = read.csv('./data/time_series_covid_19_confirmed.csv') %>%
pivot_longer(-Province.State:Long, names_to = 'date', values_to = 'confirmed')
confirmed = read.csv('./data/time_series_covid_19_confirmed.csv') %>%
pivot_longer(!matches('^X'), names_to = 'date', values_to = 'confirmed')
rlang::last_error()
confirmed = read.csv('./data/time_series_covid_19_confirmed.csv')
View(confirmed)
?read.csv
confirmed = read.csv('./data/time_series_covid_19_confirmed.csv', stringsAsFactors = T)
str(confirmed)
confirmed %>%
select(-Province.State, -Country.Region) %>%
pivot_longer(!c('Lat', 'Long'), names_to = 'date', values_to = 'confirmed')
required_packages = c(
'dplyr',
'tmap',
'tmaptools',
'sf',
'ggplot2',
'tidyr',
'lubridate'
)
lapply(required_packages, require, character.only = T)
?as.Date
confirmed %>%
select(-Province.State, -Country.Region) %>%
pivot_longer(!c('Lat', 'Long'), names_to = 'date', values_to = 'confirmed') %>%
mutate(date = as.Date(gsub('X', '', date), '%m.%d.%y'))
confirmed %>%
select(-Province.State, -Country.Region) %>%
pivot_longer(!c('Lat', 'Long'), names_to = 'date', values_to = 'confirmed') %>%
mutate(date = as.Date(gsub('X', '', date), '%m.%d.%y')) %>%
group_by(Lat, Long) %>%
mutate(perc_change = (confirmed - dplyr::lag(confirmed)) / confirmed)
confirmed %>%
select(-Province.State, -Country.Region) %>%
pivot_longer(!c('Lat', 'Long'), names_to = 'date', values_to = 'confirmed') %>%
mutate(date = as.Date(gsub('X', '', date), '%m.%d.%y')) %>%
group_by(Lat, Long) %>%
mutate(perc_change = is.nan((confirmed - dplyr::lag(confirmed, default = 0)) / confirmed, 0))
confirmed %>%
select(-Province.State, -Country.Region) %>%
pivot_longer(!c('Lat', 'Long'), names_to = 'date', values_to = 'confirmed') %>%
mutate(date = as.Date(gsub('X', '', date), '%m.%d.%y')) %>%
group_by(Lat, Long) %>%
mutate(perc_change = ifelse(
lag(confirmed, default = 0) == 0,
0,
(confirmed - lag(confirmed)) / lag(confirmed)
)
)
confirmed %>%
select(-Province.State, -Country.Region) %>%
pivot_longer(!c('Lat', 'Long'), names_to = 'date', values_to = 'confirmed') %>%
mutate(date = as.Date(gsub('X', '', date), '%m.%d.%y')) %>%
group_by(Lat, Long) %>%
mutate(perc_change = ifelse(
lag(confirmed, default = 0) == 0,
0,
(confirmed - lag(confirmed)) / lag(confirmed)
)
) %>%
filter(lat==40, long==-100)
confirmed %>%
select(-Province.State, -Country.Region) %>%
pivot_longer(!c('Lat', 'Long'), names_to = 'date', values_to = 'confirmed') %>%
mutate(date = as.Date(gsub('X', '', date), '%m.%d.%y')) %>%
group_by(Lat, Long) %>%
mutate(perc_change = ifelse(
lag(confirmed, default = 0) == 0,
0,
(confirmed - lag(confirmed)) / lag(confirmed)
)
) %>%
filter(Lat==40, Long==-100)
confirmed %>%
select(-Province.State, -Country.Region) %>%
pivot_longer(!c('Lat', 'Long'), names_to = 'date', values_to = 'confirmed') %>%
mutate(date = as.Date(gsub('X', '', date), '%m.%d.%y')) %>%
group_by(Lat, Long) %>%
mutate(perc_change = 100 * ifelse(
lag(confirmed, default = 0) == 0,
0,
(confirmed - lag(confirmed)) / lag(confirmed)
)
) %>%
filter(Lat==40, Long==-100)
confirmed %>%
select(-Province.State, -Country.Region) %>%
pivot_longer(!c('Lat', 'Long'), names_to = 'date', values_to = 'confirmed') %>%
mutate(date = as.Date(gsub('X', '', date), '%m.%d.%y')) %>%
group_by(Lat, Long) %>%
mutate(perc_change = 100 * ifelse(
lag(confirmed, default = 0) == 0,
0,
(confirmed - lag(confirmed)) / lag(confirmed)
),
country = rev_geocode_OSM(Long, Lat)
)
rev_geocode_OSM(-100, 40)
distinct(confirmed, Lat, Long)
confirmed %>%
select(-Province.State, -Country.Region) %>%
pivot_longer(!c('Lat', 'Long'), names_to = 'date', values_to = 'confirmed') %>%
mutate(date = as.Date(gsub('X', '', date), '%m.%d.%y')) %>%
group_by(Lat, Long) %>%
mutate(perc_change = 100 * ifelse(
lag(confirmed, default = 0) == 0,
0,
(confirmed - lag(confirmed)) / lag(confirmed)
)
)
countries = distinct(confirmed, Lat, Long) %>%
mutate(country = rev_geocode_OSM(Long, Lat))
us = rev_geocode_OSM(-100, 40)
View(confirmed)
us = rev_geocode_OSM(-100, 40)
rev_geocode_OSM(-100, 40)
?over_query_limit
